////////////////////////////////////////////////
// Generated by SmartState C++ Code Generator //
//                 DO NOT EDIT				  //
////////////////////////////////////////////////

#ifndef yReceiver_SS_H
#define yReceiver_SS_H

#include <ss_api.hxx>

/*Context*/
class ReceiverY;

namespace yReceiver_SS
{
	using namespace smartstate;
	//State Mgr
	class yReceiverSS : public StateMgr
	{
		public:
			yReceiverSS(ReceiverY* ctx, bool startMachine=true);

			ReceiverY& getCtx() const;

		private:
			ReceiverY* myCtx;
	};

	//Base State
	class yReceiverBaseState : public BaseState
	{
		protected:
			yReceiverBaseState(){};
			yReceiverBaseState(const string& name, BaseState* parent, yReceiverSS* mgr);

		protected:
			yReceiverSS* getMgr(){return static_cast<yReceiverSS*>(myMgr);}
	};

	//States
	//------------------------------------------------------------------------
	class Receiver_TopLevel_yReceiverSS : public virtual yReceiverBaseState
	{
			typedef yReceiverBaseState super;

		public:
			Receiver_TopLevel_yReceiverSS(){};
			Receiver_TopLevel_yReceiverSS(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onKB_CMessage(const Mesg& mesg);
			void onSERMessage(const Mesg& mesg);
			void onTMMessage(const Mesg& mesg);
	};

	class NON_CAN_Receiver_TopLevel : public virtual Receiver_TopLevel_yReceiverSS
	{
			typedef Receiver_TopLevel_yReceiverSS super;

		public:
			NON_CAN_Receiver_TopLevel(){};
			NON_CAN_Receiver_TopLevel(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
			void onTMMessage(const Mesg& mesg);
	};

	class DataCancelable_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			DataCancelable_NON_CAN(){};
			DataCancelable_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class FirstByteData_DataCancelable : public virtual DataCancelable_NON_CAN
	{
			typedef DataCancelable_NON_CAN super;

		public:
			FirstByteData_DataCancelable(){};
			FirstByteData_DataCancelable(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class EOT_DataCancelable : public virtual DataCancelable_NON_CAN
	{
			typedef DataCancelable_NON_CAN super;

		public:
			EOT_DataCancelable(){};
			EOT_DataCancelable(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class CondTransientData_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientData_NON_CAN(){};
			CondTransientData_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onKB_CMessage(const Mesg& mesg);
			void onTMMessage(const Mesg& mesg);
			void onSERMessage(const Mesg& mesg);
	};

	class FirstByteStat_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			FirstByteStat_NON_CAN(){};
			FirstByteStat_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class CondTransientCheck_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientCheck_NON_CAN(){};
			CondTransientCheck_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class CondTransientOpen_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientOpen_NON_CAN(){};
			CondTransientOpen_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class CondTransientEOT_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientEOT_NON_CAN(){};
			CondTransientEOT_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class CondlTransientStat_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondlTransientStat_NON_CAN(){};
			CondlTransientStat_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class AreWeDone_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			AreWeDone_NON_CAN(){};
			AreWeDone_NON_CAN(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onTMMessage(const Mesg& mesg);
			void onSERMessage(const Mesg& mesg);
	};

	class CAN_Receiver_TopLevel : public virtual Receiver_TopLevel_yReceiverSS
	{
			typedef Receiver_TopLevel_yReceiverSS super;

		public:
			CAN_Receiver_TopLevel(){};
			CAN_Receiver_TopLevel(const string& name, BaseState* parent, yReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
			void onTMMessage(const Mesg& mesg);
	};

};

#endif

//___________________________________vv^^vv___________________________________
