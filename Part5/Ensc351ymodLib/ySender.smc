9999 4 1
7
BEGIN DATA
BEGIN GenericState 159
159 10
5 4 162 92
1
Sender_TopLevel
0 12582911 0
77
TEXTBEGIN
    ctx.prepStatBlk(); ctx.errCnt=0; 
    ctx.KbCan = false; ctx.tm(TM_VL); 
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 132
132 10
7 16 133 90
1
NON_CAN
1 65535 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 101
101 10
83 33 95 41
1
ACKNAK
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 103
103 10
62 56 71 64
1
EOT1
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN FinalState 109
109 10
104 94 108 98
1
FinalState
BEGIN Mesg 112
112 20
79 19 116 32
1
1 1 16777215 65280
107
SER
(c==ACK) && ctx.bytesRd && !ctx.KbCan
75
TEXTBEGIN
ctx.sendBlkPrepNext(); 
ctx.errCnt=0; ctx.tm(TM_VL); 
ctx.firstBlk=false;
TEXTEND
BEGIN Mesg 113
113 20
83 56 110 70
1
1 1 16777215 65280
110
SER
c==NAK && !ctx.KbCan
69
TEXTBEGIN
ctx.sendByte(EOT);
ctx.errCnt=0;ctx.tm(TM_VL); 
ctx.firstBlk=false;
TEXTEND
BEGIN Mesg 115
115 20
67 65 98 77
1
1 1 16777215 65280
114
SER
c==ACK && !ctx.KbCan
34
TEXTBEGIN
ctx.prepStatBlk(); ctx.tm(TM_VL); 
TEXTEND
BEGIN Mesg 117
117 20
80 45 119 60
1
1 1 16777215 65280
116
SER
(c==ACK) && !ctx.bytesRd && !ctx.KbCan
80
TEXTBEGIN
ctx.sendByte(EOT);ctx.errCnt=0; 
ctx.closeTransferredFile();
ctx.tm(TM_VL); 

TEXTEND
BEGIN GenericState 118
118 10
47 33 55 41
1
One
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 123
123 10
109 58 120 66
1
EOTEOT
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 125
125 20
37 43 60 58
1
1 1 16777215 65280
124
SER
c == 'C' && !ctx.bytesRd && !ctx.KbCan
80
TEXTBEGIN
ctx.sendByte(EOT);
ctx.tm(TM_VL); 
ctx.errCnt=0; 
ctx.closeTransferredFile();
TEXTEND
BEGIN Mesg 127
127 20
98 34 133 46
1
1 1 16777215 65280
126
SER
 (c==NAK || (c=='C' && ctx.firstBlk)) && (ctx.errCnt < errB) && !ctx.KbCan
47
TEXTBEGIN
ctx.resendBlk();
ctx.errCnt++; ctx.tm(TM_VL); 
TEXTEND
BEGIN InitialState 130
130 10
14 49 18 53
1
InitialState
BEGIN GenericState 135
135 10
139 42 147 50
1
CAN
0 65535 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 137
137 20
132 53 152 64
1
1 1 16777215 65280
136
SER
c == CAN
25
TEXTBEGIN
ctx.tmPush(
   TM_CHAR);
TEXTEND
BEGIN Mesg 139
139 20
137 74 163 90
1
1 1 16777215 65280
138
SER
c == CAN
72
TEXTBEGIN
ctx.closeTransferredFile();
ctx.clearCan();
ctx.result="RcvCancelled";
TEXTEND
BEGIN Mesg 141
141 20
36 62 70 74
1
1 1 16777215 65280
140
SER
c == ACK && !ctx.KbCan
60
TEXTBEGIN
cout << "1st EOT ACK'd";
ctx.prepStatBlk(); ctx.tm(TM_VL); 
TEXTEND
BEGIN Note 142
142 50
62 108 122 125
1
0 0 4227327 128
290
TEXTBEGIN
YMODEM Sender Statechart
Copyright (c) 24  November 2021 Craig Scratchley
craig_scratchley AT alumni.sfu.ca
Real events are either 
      KB_C (cancel command received from keyboard, higher priority)
      SER (serial character recieved, lower priority), 
      TM (timeout occurred) 
TEXTEND
BEGIN Mesg 144
144 20
111 92 159 106
1
1 1 16777215 65280
143
SER
c==NAK && (ctx.errCnt >= errB) 
69
TEXTBEGIN
ctx.cans();
ctx.closeTransferredFile();
ctx.result="ExcessiveNAKs";
TEXTEND
BEGIN Transition 145
145 40
32 33 32 41
118 101
2 3 4 1
2 55 39 56 39 
1 56 39 82 39 
3 82 39 83 39 
BEGIN Mesg 146
146 20
55 28 87 44
1
1 1 16777215 65280
145
SER
c=='C' && ctx.bytesRd && !ctx.KbCan
53
TEXTBEGIN
ctx.sendBlkPrepNext();
ctx.tm(TM_VL); ctx.errCnt=0; 
TEXTEND
BEGIN Mesg 148
148 20
114 66 133 84
1
1 1 16777215 65280
147
SER
c==NAK && !ctx.KbCan && ctx.errCnt < errB 
52
TEXTBEGIN
ctx.sendByte(EOT);
ctx.errCnt++;
ctx.tm(TM_VL); 

TEXTEND
BEGIN InitialState 156
156 10
76 11 80 15
1
InitialState
BEGIN GenericState 160
160 10
14 66 24 74
1
StatC
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 163
163 20
17 54 44 67
1
1 1 16777215 65280
162
SER
c=='C' && ctx.transferringFileD != -1
56
TEXTBEGIN
ctx.sendBlkPrepNext(); ctx.errCnt=0; 
ctx.tm(TM_VL); 

TEXTEND
BEGIN GenericState 164
164 10
13 33 30 41
1
ACKNAKSTAT
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 166
166 20
11 75 45 87
1
1 1 16777215 65280
165
SER
c=='C' && ctx.fileName && ctx.transferringFileD == -1
36
TEXTBEGIN
ctx.cans();
ctx.result="OpenError";
TEXTEND
BEGIN Transition 167
167 40
73 40 73 48
164 118
2 2 4 2
2 30 37 31 37 
1 31 37 46 37 
3 46 37 47 37 
BEGIN Transition 140
140 40
48 57 48 65
103 160
3 2 2 2
2 66 64 66 65 
0 66 65 66 70 
1 66 70 25 70 
3 25 70 24 70 
BEGIN Transition 110
110 40
58 57 58 65
103 123
2 2 4 3
2 71 60 72 60 
1 72 60 108 60 
3 108 60 109 60 
BEGIN Transition 173
173 40
53 42 53 50
164 109
4 2 1 1
2 13 37 12 37 
1 12 37 9 37 
0 9 37 9 88 
1 9 88 106 88 
0 106 88 106 93 
3 106 93 106 94 
BEGIN Transition 179
179 40
142 41 142 49
135 135
3 1 2 3
2 145 50 145 51 
0 145 51 145 55 
1 145 55 161 55 
0 161 55 161 48 
1 161 48 148 48 
3 148 48 147 48 
BEGIN Transition 177
177 40
142 39 142 47
135 132
2 1 2 1
2 147 44 148 44 
1 148 44 161 44 
0 161 44 161 35 
1 161 35 134 35 
3 134 35 133 35 
BEGIN Transition 136
136 40
80 26 80 34
132 135
2 2 3 3
2 133 53 134 53 
1 134 53 141 53 
0 141 53 141 51 
3 141 51 141 50 
BEGIN Transition 183
183 40
136 43 136 51
135 132
1 3 2 1
2 145 42 145 41 
0 145 41 145 35 
1 145 35 134 35 
3 134 35 133 35 
BEGIN Mesg 168
168 20
30 25 49 39
1
1 1 16777215 65280
167
SER
c==ACK && ctx.fileName && !ctx.KbCan
39
TEXTBEGIN
ctx.firstBlk= true; 
ctx.tm(TM_VL); 

TEXTEND
BEGIN Mesg 170
170 20
13 18 49 30
1
1 1 16777215 65280
169
SER
(c==NAK || c=='C') && !ctx.KbCan
50
TEXTBEGIN
ctx.resendBlk();
ctx.errCnt++;
ctx.tm(TM_VL); 

TEXTEND
BEGIN Mesg 174
174 20
9 41 35 49
1
1 1 16777215 65280
173
SER
c==ACK && !ctx.fileName
18
TEXTBEGIN
ctx.result="Done";
TEXTEND
BEGIN Mesg 176
176 20
136 15 169 28
1
1 1 16777215 65280
175
KB_C
!ctx.KbCan
68
TEXTBEGIN
ctx.KbCan = true;
ctx.tmRed(TM_VL - 
                 TM_2CHAR);

TEXTEND
BEGIN Mesg 178
178 20
148 35 166 46
1
1 1 16777215 65280
177
SER
c != CAN             && !ctx.KbCan
12
TEXTBEGIN
ctx.tmPop();
TEXTEND
BEGIN Mesg 180
180 20
145 50 164 57
1
1 1 16777215 65280
179
KB_C

15
TEXTBEGIN
ctx.KbCan=true;
TEXTEND
BEGIN Mesg 184
184 20
133 35 147 44
1
1 1 16777215 65280
183
TM
!ctx.KbCan
12
TEXTBEGIN
ctx.tmPop();
TEXTEND
BEGIN Transition 165
165 40
62 82 62 90
160 109
4 2 1 1
2 14 70 13 70 
1 13 70 11 70 
0 11 70 11 86 
1 11 86 106 86 
0 106 86 106 93 
3 106 93 106 94 
BEGIN Transition 190
190 40
162 60 162 68
159 109
2 3 3 1
2 162 70 163 70 
1 163 70 165 70 
0 165 70 165 107 
1 165 107 106 107 
0 106 107 106 99 
3 106 99 106 98 
BEGIN Transition 126
126 40
60 28 60 36
101 101
2 1 3 1
2 95 35 96 35 
1 96 35 98 35 
0 98 35 98 45 
1 98 45 92 45 
0 92 45 92 42 
3 92 42 92 41 
BEGIN Transition 187
187 40
21 65 21 73
160 109
2 3 1 1
2 24 72 25 72 
1 25 72 27 72 
0 27 72 27 75 
1 27 75 106 75 
0 106 75 106 93 
3 106 93 106 94 
BEGIN Transition 131
131 40
19 7 19 15
130 160
4 1 4 3
2 14 51 13 51 
1 13 51 11 51 
0 11 51 11 68 
1 11 68 13 68 
3 13 68 14 68 
BEGIN Transition 196
196 40
83 88 83 96
159 109
3 2 4 1
2 83 92 83 93 
0 83 93 83 96 
1 83 96 103 96 
3 103 96 104 96 
BEGIN Transition 114
114 40
84 30 84 38
123 160
3 3 2 2
2 112 66 112 67 
0 112 67 112 72 
1 112 72 28 72 
0 28 72 28 70 
1 28 70 25 70 
3 25 70 24 70 
BEGIN Transition 116
116 40
75 74 75 82
101 103
3 2 2 1
2 89 41 89 42 
0 89 42 89 45 
1 89 45 80 45 
0 80 45 80 58 
1 80 58 72 58 
3 72 58 71 58 
BEGIN Transition 198
198 40
66 49 66 57
103 103
1 2 1 3
2 66 56 66 55 
0 66 55 66 53 
1 66 53 68 53 
0 68 53 68 55 
3 68 55 68 56 
BEGIN Transition 107
107 40
36 36 36 44
101 101
1 3 4 3
2 92 33 92 32 
0 92 32 92 30 
1 92 30 79 30 
0 79 30 79 35 
1 79 35 82 35 
3 82 35 83 35 
BEGIN Transition 157
157 40
149 1 149 9
156 132
4 1 1 2
2 76 13 75 13 
1 75 13 70 13 
0 70 13 70 15 
3 70 15 70 16 
BEGIN Transition 175
175 40
101 10 101 18
132 132
1 3 2 1
2 101 16 101 15 
0 101 15 101 13 
1 101 13 136 13 
0 136 13 136 35 
1 136 35 134 35 
3 134 35 133 35 
BEGIN Transition 143
143 40
84 24 84 32
132 109
2 3 3 1
2 133 71 134 71 
1 134 71 136 71 
0 136 71 136 93 
1 136 93 142 93 
0 142 93 142 103 
1 142 103 106 103 
0 106 103 106 99 
3 106 99 106 98 
BEGIN Transition 124
124 40
12 29 12 37
118 103
3 3 4 3
2 49 41 49 42 
1 49 42 37 42 
0 37 42 37 58 
1 37 58 61 58 
3 61 58 62 58 
BEGIN Transition 138
138 40
115 33 115 41
135 109
3 1 3 1
2 145 50 145 51 
0 145 51 145 57 
1 145 57 149 57 
0 149 57 149 74 
1 149 74 137 74 
0 137 74 137 85 
1 137 85 160 85 
0 160 85 160 105 
1 160 105 106 105 
0 106 105 106 99 
3 106 99 106 98 
BEGIN Transition 169
169 40
66 38 66 46
164 164
1 1 1 2
2 17 33 17 32 
0 17 32 17 29 
1 17 29 21 29 
0 21 29 21 32 
3 21 32 21 33 
BEGIN Transition 194
194 40
48 26 48 34
118 164
1 1 1 3
2 49 33 49 32 
0 49 32 49 20 
1 49 20 46 20 
0 46 20 46 24 
1 46 24 29 24 
0 29 24 29 30 
1 29 30 25 30 
0 25 30 25 32 
3 25 32 25 33 
BEGIN Transition 147
147 40
107 55 107 63
123 123
2 3 2 2
2 120 64 121 64 
1 121 64 123 64 
0 123 64 123 66 
1 123 66 128 66 
0 128 66 128 62 
1 128 62 121 62 
3 121 62 120 62 
BEGIN Transition 162
162 40
62 74 62 82
160 164
1 1 2 3
2 17 66 17 65 
0 17 65 17 54 
1 17 54 34 54 
0 34 54 34 39 
1 34 39 31 39 
3 31 39 30 39 
BEGIN Mesg 188
188 20
39 75 112 89
1
1 1 16777215 65280
187
KB_C

137
TEXTBEGIN
if (ctx.transferringFileD == -1) ctx.result="KbCancelledOpenErr"; 
else {ctx.closeTransferredFile(); ctx.result="KbCancelledFromStatC";}
TEXTEND
BEGIN Mesg 191
191 20
126 107 157 129
1
1 1 16777215 65280
190
TM

122
TEXTBEGIN
ctx.cans();
ctx.closeTransferredFile();
if (ctx.KbCan)
     ctx.result="KbCancelled";
else
     ctx.result="Timeout";
TEXTEND
BEGIN Note 192
192 50
6 93 60 111
1
0 0 65535 255
288
TEXTBEGIN
Unless a fast simulation has been chosen ...

TM_VL (Very Long timeout) gives 60 seconds
TM_SOH (normal timeout waiting for SOH) gives 10 seconds
TM_CHAR (inter-character timeout) gives 1 second
TM_2CHAR gives a period longer than the 
           inter-character timeout of 1 sec.

TEXTEND
BEGIN Note 193
193 50
102 2 142 12
1
0 0 8454016 128
141
TEXTBEGIN
ctx.cans() should not be called immediately after the crc16 for a block has been written to the medium, or some CAN characters may be purged.
TEXTEND
BEGIN Mesg 195
195 20
49 19 79 28
1
1 1 16777215 65280
194
SER
c==NAK && !ctx.KbCan
47
TEXTBEGIN
ctx.resendBlk(); ctx.errCnt++;
ctx.tm(TM_VL); 
TEXTEND
BEGIN Mesg 197
197 20
62 94 102 110
1
1 1 16777215 65280
196
SER
ctx.KbCan && (c==ACK || c==NAK || c=='C')
67
TEXTBEGIN
ctx.cans();
ctx.closeTransferredFile();
ctx.result="KbCancelled";
TEXTEND
BEGIN Mesg 199
199 20
59 40 86 57
1
1 1 16777215 65280
198
SER
c=='C' && ctx.firstBlk && ctx.errCnt < errB
49
TEXTBEGIN
ctx.sendByte(EOT);
++ctx.errCnt;
ctx.tm(TM_VL);
TEXTEND
BEGIN Note 200
200 50
6 115 47 125
1
0 0 8454016 128
161
TEXTBEGIN
Due to a bug in SmartState studio, in this StateChart, please interpret && as &&&& -- a logical AND.  Do not interpret it as a bitwise AND as you normally would.
TEXTEND
END DATA
ySender
SenderY
SenderY.h

122
INCLUDE BEGIN
#include "AtomicCOUT.h"
#include <stdlib.h>

/*  YMODEM Sender
Copyright (C) 2021 Craig Scratchley
wcs AT sfu.ca */

INCLUDE END
20
DECL BEGIN
#define c wParam


DECL END
Copyright (c) 2021 W. Craig Scratchley
68
DESC BEGIN
 YMODEM Sender

Copyright (C) 2021 Craig Scratchley
wcs AT sfu.ca
DESC END
0
INCLUDE BEGIN

INCLUDE END
0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
