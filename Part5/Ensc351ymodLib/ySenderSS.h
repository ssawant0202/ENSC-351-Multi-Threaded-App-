////////////////////////////////////////////////
// Generated by SmartState C++ Code Generator //
//                 DO NOT EDIT				  //
////////////////////////////////////////////////

#ifndef ySender_SS_H
#define ySender_SS_H

#include <ss_api.hxx>

/*Context*/
class SenderY;

namespace ySender_SS
{
	using namespace smartstate;
	//State Mgr
	class ySenderSS : public StateMgr
	{
		public:
			ySenderSS(SenderY* ctx, bool startMachine=true);

			SenderY& getCtx() const;

		private:
			SenderY* myCtx;
	};

	//Base State
	class ySenderBaseState : public BaseState
	{
		protected:
			ySenderBaseState(){};
			ySenderBaseState(const string& name, BaseState* parent, ySenderSS* mgr);

		protected:
			ySenderSS* getMgr(){return static_cast<ySenderSS*>(myMgr);}
	};

	//States
	//------------------------------------------------------------------------
	class Sender_TopLevel_ySenderSS : public virtual ySenderBaseState
	{
			typedef ySenderBaseState super;

		public:
			Sender_TopLevel_ySenderSS(){};
			Sender_TopLevel_ySenderSS(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onTMMessage(const Mesg& mesg);
			void onSERMessage(const Mesg& mesg);
	};

	class NON_CAN_Sender_TopLevel : public virtual Sender_TopLevel_ySenderSS
	{
			typedef Sender_TopLevel_ySenderSS super;

		public:
			NON_CAN_Sender_TopLevel(){};
			NON_CAN_Sender_TopLevel(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
			void onKB_CMessage(const Mesg& mesg);
	};

	class ACKNAK_NON_CAN : public virtual NON_CAN_Sender_TopLevel
	{
			typedef NON_CAN_Sender_TopLevel super;

		public:
			ACKNAK_NON_CAN(){};
			ACKNAK_NON_CAN(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class EOT1_NON_CAN : public virtual NON_CAN_Sender_TopLevel
	{
			typedef NON_CAN_Sender_TopLevel super;

		public:
			EOT1_NON_CAN(){};
			EOT1_NON_CAN(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class One_NON_CAN : public virtual NON_CAN_Sender_TopLevel
	{
			typedef NON_CAN_Sender_TopLevel super;

		public:
			One_NON_CAN(){};
			One_NON_CAN(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class EOTEOT_NON_CAN : public virtual NON_CAN_Sender_TopLevel
	{
			typedef NON_CAN_Sender_TopLevel super;

		public:
			EOTEOT_NON_CAN(){};
			EOTEOT_NON_CAN(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class StatC_NON_CAN : public virtual NON_CAN_Sender_TopLevel
	{
			typedef NON_CAN_Sender_TopLevel super;

		public:
			StatC_NON_CAN(){};
			StatC_NON_CAN(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
			void onKB_CMessage(const Mesg& mesg);
	};

	class ACKNAKSTAT_NON_CAN : public virtual NON_CAN_Sender_TopLevel
	{
			typedef NON_CAN_Sender_TopLevel super;

		public:
			ACKNAKSTAT_NON_CAN(){};
			ACKNAKSTAT_NON_CAN(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class CAN_Sender_TopLevel : public virtual Sender_TopLevel_ySenderSS
	{
			typedef Sender_TopLevel_ySenderSS super;

		public:
			CAN_Sender_TopLevel(){};
			CAN_Sender_TopLevel(const string& name, BaseState* parent, ySenderSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onKB_CMessage(const Mesg& mesg);
			void onSERMessage(const Mesg& mesg);
			void onTMMessage(const Mesg& mesg);
	};

};

#endif

//___________________________________vv^^vv___________________________________
